slug: boundary-ssh-and-database
id: adnyt8negprv
type: track
title: Using Boundary for SSH and Database Access
teaser: TODO
description: TODO
icon: https://storage.googleapis.com/instruqt-frontend/assets/hashicorp/tracks/boundary.png
tags:
- terraform
owner: hashicorp
developers:
- neil@hashicorp.com
private: true
published: false
show_timer: true
challenges:
- slug: explore-the-admin-ui
  id: wyaxsa25ysd1
  type: challenge
  title: Explore the Admin UI
  teaser: Get familiar with Bonudary's concepts and admin UI before jumping into accessing
    targets.
  notes:
  - type: text
    contents: |-
      Boundary enables simple and secure access to dynamic infrastructure by:

      - Identity-based access controls: Streamline just-in-time access to privileged sessions (e.g. TCP, SSH, RDP) for users and applications. Tightly control access permissions with extensible role-based access controls.
      - Access Automation: Define your perimeter of resources, identities, and access controls as code through Boundary's fully-instrumented Terraform Provider, REST API, CLI, and SDK. Automate the discovery of new resources and enforcement of existing policies as resources are provisioned.
      - Session Visibility: Security administrators gain monitor and managed the privileged sessions established with Boundary. Export session logs to your analytics tool of choice.

      In this track, you will learn how to use Boundary to dynamically access hosts via SSH, as well as remote Postgres database access.
  - type: text
    contents: Traditional approaches like SSH bastion hosts or VPNs that require distributing
      and managing credentials, configure network controls like firewalls, and expose
      the private network. Boundary provides a secure way to access to hosts and critical
      systems without having to manage credentials or expose your network.
  - type: text
    contents: "| Resource | Description |\n| --- | --- |\n| Scope\t| Abstract permission
      boundary modeled as a container. A scope can contain scopes forming a tree.
      |\n| Organization | Top-level container (scope) which owns zero to many projects
      and zero to many authentication methods. An organization inherits from scope
      allowing it to own zero to many groups, roles, policies, targets, host catalogs
      or credential stores. |\n| Project\t| Child scope of an organization. |\n| User
      | Any entity authorized to access Boundary using authentication credentials
      specific to one of the configured authentication methods. A user can belong
      to zero or more groups. |\n| Group\t| Collection of users used for access control.
      A group is owned by one and only one scope. |\n| Role | Collection of capabilities
      granted to any principal (user, group, or project) the role is assigned to.
      A role belongs to one and only one scope, and owns zero or more direct grants.
      |\n| Host | Computing element with a network address reachable from Boundary.
      |\n| Host catalog | Permission boundary modeled as a container containing scopes
      forming a tree. |\n| Host set |Subset of hosts from the set of hosts of the
      host catalog it belongs to. A host set belongs to one and only one host; therefore,
      it gets deleted when its host catalog is deleted. |\n| Target | Networked service
      a user can connect to and interact with through Boundary. A target can contain
      zero or more host sets. |"
  - type: text
    contents: '''TODO: Explain Controllers vs Workers and show/ reference architecture.'''
  assignment: |-
    # Explore the Admin Console

    Boundary's Admin Console provides an easy way to manage resources. Before using Boundary to securely access any
    dynamic infrastructure, you should take a tour of the console to understand all the components.

    In this track, Boundary has already been
    [installed](https://learn.hashicorp.com/tutorials/boundary/getting-started-install?in=boundary/getting-started)
    for you. A Boundary Controller and a Boundary Worker are also already running. To make your initial tour through
    Boundary a little more interesting, Boundary was
    [initialized with generated resources](https://www.boundaryproject.io/docs/installing/no-gen-resources).

    What are generated resources? Boundary can automatically generate a number of resources to make getting started
    easier. Default scopes, auth methods, user, account, and targets are just some of the resources Boundary will
    generate unless you tell it not to.

    If you are not familiar with installing Boundary, the reference architecture, or concepts like scopes, auth methods,
    users, accounts, and more - check out the [Install and Configure Boundary Track](TODO).

    ---

    # Exploring Roles, Principals and Grants in the Admin UI

    Open the Boundary UI tab. You should see a login screen. To access the password for the `admin` user that was
    generated for you, grab it from the environment in the Controller terminal tab.

    ```
    echo $ADMIN_PASSWORD
    ```

    Once you have logged in, you will see the home screen containing all the top level resources in Boundary. Select
    *Roles* in the left sidebar, then select the "Administration" role.

    Notice that `admin` user is listed. *User*, *group*, and *project* are a type of principal which can be assigned to
    roles.

    Click on the *Grants* tab to view the permissions allowed on this role.  Grants represent strings of actions on
    resources: `id=<resource_id>; action=<actions>`

    The grant for Administration role indicates that all actions (`actions=*`) on all resources (`id=*;type=*`) are
    permitted. Refer to the [documentation](https://www.boundaryproject.io/docs/concepts/security/permissions#permission-grant-formats)
    for more details.

    Return to the *Roles* list and select *Login and Default Grants* role.  Click *Grants* to view its permissions.

    A role can have multiple grants defined. Those grants are deleted when the role is deleted. A grant is also deleted
    if its associated resource is deleted.

    Select *Projects* and then *Generated project scope*. Notice that you can see *Sessions*, *Targets* and
    *Host Catalogs*.

    Select *Host Catalogs -> Generated host catalog -> Host Sets -> Generated host set* to view the details of the
    *Host Set*. You can then select the *Hosts* tab to view attached hosts.
  tabs:
  - title: Controller
    type: terminal
    hostname: boundary-controller
  - title: Boundary UI
    type: service
    hostname: boundary-controller
    port: 9200
  difficulty: advanced
  timelimit: 3600
- slug: connect-to-your-first-target-with-ssh
  id: wm0enxxguhie
  type: challenge
  title: Connect to Your First Target with SSH
  teaser: Use Boundary to SSH into a target host.
  notes:
  - type: text
    contents: TODO
  assignment: |-
    *Connecting to Your First Target with SSH*

    Now that you've familiarized yourself with the generated resources and have explored the UI, it's time to connect
    to your first target. You will connect to the generated host, first.

    In the Controller tab, you will authenticate using the CLI client using the generated auth method, username and
    password. You can see those values in the environment easily, with the below.

    ```
    echo $GEN_AUTH_METHOD
    echo $ADMIN_USERNAME
    echo $ADMIN_PASSWORD
    ```

    Now that you can see the values you will be using, log in using those environment variables.

    ```
    boundary authenticate password \
      -auth-method-id=$GEN_AUTH_METHOD \
      -keyring-type="none"\
      -login-name=$ADMIN_USERNAME \
      -password=$ADMIN_PASSWORD
    ```

    You should see a Boundary token returned. You want to store that value in an environment variable.

    ```
    export BOUNDARY_TOKEN=<token_from_above>
    ```

    For a simple one-liner to to store that value in the environment for later usage, use the below command.

    ```
    export BOUNDARY_TOKEN=$( \
      boundary authenticate password \
      -format=json \
      -auth-method-id=$GEN_AUTH_METHOD \
      -keyring-type="none"\
      -login-name=$ADMIN_USERNAME \
      -password=$ADMIN_PASSWORD | jq -r .item.attributes.token)
    ```

    Now that you understand the different components in Boundary and how they are related to each other, it's time to
    navigate to our first target and connect to it.

    List the scopes in Boundary. You will use the automatically generated scope for this challenge.

    ```
    boundary scopes list
    ```

    You can put that ID into an env var easily using the following command.

    _TODO: stuff this into the bashrc in setup or solve._

    ```
    # NOTE: This is the global scope ID, we need the project scope ID
    export GEN_GLOBAL_SCOPE_ID=$(boundary scopes list -format=json | jq -r '.items[0].id')
    export GEN_PROJ_SCOPE_ID=$(boundary scopes list -scope-id=$GEN_GLOBAL_SCOPE_ID -format=json | jq -r '.items[0].id')
    echo $GEN_GLOBAL_SCOPE_ID
    echo $GEN_PROJ_SCOPE_ID
    ```

    Then, you want to list all the targets for your generated scope.

    ```
    boundary targets list
    ```

    ```
    boundary targets list -scope-id=$GEN_PROJ_SCOPE_ID
    ```

    ```
    export GEN_TARGET_ID=$(boundary targets list -scope-id=$GEN_PROJ_SCOPE_ID -format=json | jq -r '.items[0].id')
    echo $GEN_TARGET_ID
    ```

    _TODO: add a diagram of the components to the notes and tell the user they can go view that if they need a refresher._

    Get the details.

    ```
    boundary targets read -id=<target_id>
    ```

    ```
    boundary targets read -id=$GEN_TARGET_ID
    ```

    Connect.

    ```
    boundary connect ssh -target-id=$GEN_TARGET_ID
    // No workers error

    # ERROR IN WORKER JOURNAL
    # Jun 29 00:53:59 worker boundary[3986]: 2021-06-29T00:53:59.886Z [ERROR] worker: error making status request to controller: error="rpc error: code = Unavailable desc = last connection error: connection error: desc = "transport: Error while dialing unable to dial to controller: dial tcp: lookup boundary-controller on 127.0.0.53:53: server misbehaving"
    ```
  tabs:
  - title: VS Code
    type: service
    hostname: boundary-controller
    port: 8443
  - title: Controller
    type: terminal
    hostname: boundary-controller
  - title: Worker
    type: terminal
    hostname: boundary-worker
  - title: Boundary UI
    type: service
    hostname: boundary-controller
    port: 9200
  difficulty: advanced
  timelimit: 3600
- slug: configure-a-new-host-set
  id: 1ut7x9mfbihc
  type: challenge
  title: Configure a New Host Set
  teaser: TODO
  notes:
  - type: text
    contents: TODO
  assignment: '*Configure a New Host Set *'
  tabs:
  - title: VS Code
    type: service
    hostname: boundary-controller
    port: 8443
  - title: Controller
    type: terminal
    hostname: boundary-controller
  - title: Worker
    type: terminal
    hostname: boundary-worker
  - title: Boundary UI
    type: service
    hostname: boundary-controller
    port: 9200
  difficulty: advanced
  timelimit: 3600
- slug: connect-to-database
  id: 29dntojnecqc
  type: challenge
  title: Connect to a Database
  teaser: Connect to a remote database with a session brokered by Boundary
  notes:
  - type: text
    contents: TODO
  assignment: '*Connect to a Database*'
  tabs:
  - title: VS Code
    type: service
    hostname: boundary-controller
    port: 8443
  - title: Controller
    type: terminal
    hostname: boundary-controller
  - title: Worker
    type: terminal
    hostname: boundary-worker
  - title: Boundary UI
    type: service
    hostname: boundary-controller
    port: 9200
  difficulty: advanced
  timelimit: 3600
checksum: "16214055451935354854"
