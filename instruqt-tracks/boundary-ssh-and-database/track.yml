slug: boundary-ssh-and-database
id: adnyt8negprv
type: track
title: Managing Boundary for SSH and Database Access
teaser: TODO
description: TODO
icon: https://storage.googleapis.com/instruqt-frontend/assets/hashicorp/tracks/boundary.png
tags:
- boundary
owner: hashicorp
developers:
- neil@hashicorp.com
private: true
published: false
show_timer: true
skipping_enabled: true
challenges:
- slug: getting-started-with-boundary
  id: ctko5pdbst2d
  type: challenge
  title: Getting Started With Boundary
  teaser: Familiarize yourself with Boundary resources, and set up your first scopes and users.
  notes:
  - type: text
    contents: |-
      Boundary is a tool for managing identity-based access for modern, dynamic infrastructure. Just as infrastructure
      itself can be complex, at first glance Boundary can seem complex as well. As a result, it's helpful to understand
      how Boundary organizes security principals and resources, as well as how it allows you define granular
      permissions to those principals.

      In this track, you will learn how to manage all the different principals and resources in Boundary, as well as
      how to leverage those resources to connect to a host via SSH, as well as a Postgres instance via TCP.
  - type: text
    contents: |-
      In this challenge, you will learn about the following Boundary resources.

      - Scope: Abstract permission boundary modeled as a container. A scope can contain scopes forming a tree.
      - Organization: Top-level container (scope) which owns zero to many projects and zero to many authentication methods. An organization inherits from scope allowing it to own zero to many groups, roles, policies, targets, host catalogs or credential stores.
      - Project: Child scope of an organization.
  - type: text
    contents: |-
      Boundary has already been
      [installed](https://learn.hashicorp.com/tutorials/boundary/getting-started-install?in=boundary/getting-started)
      for you. A Boundary Controller and a Boundary Worker are also already running.  If you are not familiar with
      installing Boundary, the reference architecture, or concepts like scopes, auth methods, users, accounts, and
      more - check out the [Install and Configure Boundary Track](TODO).
  - type: text
    contents: The Boundary cluster was initialized *without generated resources*...
  - type: text
    contents: |-
      What are generated resources? When you run `boundary dev` or boundary `database init`, Boundary automatically
      generates a number of resources to make getting started easier. Default scopes, auth methods, user, account, and
      targets are just some of the resources Boundary will generate unless you tell it not to.
  - type: text
    contents: |-
      In a production or long-running environment, these resources are not necessary, but without them, managing
      Boundary from scratch isn't straightforward...
  - type: text
    contents: |-
      How do you create your first user and login to administer a Boundary deployment that has no authentication
      methods, users, accounts, etc.?

      You will learn that in this track.
  assignment: |-
    # Getting Started

    This first challenge will focus on scopes.

    What are scopes, you ask? Scopes are a foundational part of Boundary. They allow users to partition resources
    and assign ownership of resources to principals. There are three types of scopes within Boundary:

    - *Global (`global`):* There is only one `global` scope. It is the entry point for initial administration/setup and to manage the org scopes.
    - *Org:* Under the `global` scope, you can create multiple org scopes. Orgs are used to hold IAM-related resources and project scopes.
    - *Project:* Under each org scope, you can create multiple project scopes. Projects are used to hold infrastructure-related resources.

    In this challenge, you're going to create an org scope and project scope, without admin or default role creation.
    You're going to specify a role for managing these scopes by selected users in a later challenge.

    TODO: explain boundary-controller-recovery.hcl

    ---

    # Setting Up Your Scopes

    While Boundary has been [initiialized](https://www.boundaryproject.io/docs/installing/no-gen-resources) for you,
    this instance is currently a blank slate. The first thing you'll need to do is create the `HashiCups Engineering`
    org scope inside the `global` scope. Notice that you are skipping the creation of the admin and default roles for
    the scope.  This allows you to more explitly control access to Boundary, rather than use generated resources.

    Create a new org under the `global` scope named "HashiCups Engineering".

    ```
    boundary scopes create -name 'HashiCups Engineering' \
      -scope-id 'global' \
      -recovery-config /root/boundary-controller-recovery.hcl \
      -skip-admin-role-creation \
      -skip-default-role-creation
    ```

    Example output:

    ```
    Scope information:
      Created Time:        Thu, 08 Jul 2021 16:54:24 UTC
      ID:                  o_Sxjf9392Zv
      Name:                HashiCups Engineering
      Updated Time:        Thu, 08 Jul 2021 16:54:24 UTC
      Version:             1

      Scope (parent):
        ID:                global
        Name:              global
        Type:              global

    <...truncated...>
    ```

    Grab the org scope ID from the output and store it in an environment variable for later usage.

    ```
    export ORG_SCOPE_ID=<ORG_SCOPE_ID_FROM_ABOVE>
    ```

    Create a new org under the new org scope named, "HashiCups Web App" using the org scope ID from above, again,
    without the admin or default roles being created.

    ```
    boundary scopes create -name 'HashiCups Web App' \
      -scope-id $ORG_SCOPE_ID \
      -recovery-config /root/boundary-controller-recovery.hcl \
      -skip-admin-role-creation \
      -skip-default-role-creation
    ```

    Example output:

    ```
    Scope information:
      Created Time:        Thu, 08 Jul 2021 16:59:25 UTC
      ID:                  p_9cvnExOh1E
      Name:                HashiCups App
      Updated Time:        Thu, 08 Jul 2021 16:59:25 UTC
      Version:             1

      Scope (parent):
        ID:                o_Sxjf9392Zv
        Name:              HashiCups
        Parent Scope ID:   global
        Type:              org

    <...truncated...>
    ```

    Grab the project scope ID from the output and store it in an environment variable for later usage.

    ```
    export PROJECT_SCOPE_ID=<PROJECT_SCOPE_ID_FROM_ABOVE>
    ```

    Before continuing to the next challenge, be sure to add the environment variables you set above to the `~/.bashrc`
    file so they can be used across sessions.

    ```
    echo "export ORG_SCOPE_ID=$ORG_SCOPE_ID" >> ~/.bashrc
    echo "export PROJECT_SCOPE_ID=$PROJECT_SCOPE_ID" >> ~/.bashrc
    ```

    You now have your two scopes ready to go and are ready to configure your initial users and roles.
  tabs:
  - title: Controller
    type: terminal
    hostname: boundary-controller
  - title: Worker
    type: terminal
    hostname: boundary-worker
  - title: Boundary UI
    type: service
    hostname: boundary-controller
    port: 9200
  - title: VS Code
    type: service
    hostname: boundary-controller
    port: 8443
  difficulty: advanced
  timelimit: 600
- slug: configure-auth-methods
  id: pqy8xx0haupd
  type: challenge
  title: Configure Auth Methods
  teaser: Learn to configure auth methods in Boundary for user authentication.
  notes:
  - type: text
    contents: '- Auth Methods: TODO'
  assignment: |-
    # Configure Auth Methods

    This challenge will focus on the creation of auth methods.

    Now that you have your org scope and project scope created, it's time to add an auth method. Auth methods are
    resources that provide a mechanism for users to authenticate to Boundary. An auth method contains accounts which
    link an individual user to a set of credentials and managed groups which groups accounts that satisfy criteria
    and can be used as principals in roles. Auth methods can be defined at either a `global` or org scope.

    First, create an auth method in the `global` scope.

    ```
    boundary auth-methods create password \
      -recovery-config /root/boundary-controller-recovery.hcl \
      -scope-id global \
      -name 'hashicups_auth_method' \
      -description 'Password auth method for HashiCups Engineering org.'
    ```

    Example output:

    ```
    Auth Method information:
      Created Time:                Tue, 13 Jul 2021 00:16:01 UTC
      Description:                 Password auth method for HashiCups Engineering org.
      ID:                          ampw_kHH1Cb4vmy
      Name:                        hashicups_auth_method
      Type:                        password
      Updated Time:                Tue, 13 Jul 2021 00:16:01 UTC
      Version:                     1

    <...truncated...>
    ```

    Grab the org auth method ID from the output and store it in an environment variable for later usage.

    ```
    export ORG_AUTH_METHOD_ID=<ORG_AUTH_METHOD_ID_FROM_ABOVE>
    ```

    Then, create an auth method in the org scope you created in the first challenge.

    ```
    boundary auth-methods create password \
      -recovery-config /root/boundary-controller-recovery.hcl \
      -scope-id $ORG_SCOPE_ID \
      -name 'hashicups_app_auth_method' \
      -description 'Password auth method for HashiCups Web App project.'
    ```

    Example output:

    ```
    Auth Method information:
      Created Time:                Thu, 08 Jul 2021 18:08:10 UTC
      Description:                 Password auth method for HashiCups Web App project.
      ID:                          ampw_YXiGz3OWHI
      Name:                        hashicups_app_auth_method
      Type:                        password
      Updated Time:                Thu, 08 Jul 2021 18:08:10 UTC
      Version:                     1

      Scope:
        ID:                        o_tc3qudleXh
        Name:                      HashiCups
        Parent Scope ID:           global
        Type:                      org

    <...truncated...>
    ```

    Grab the project auth method ID from the output and store it in an environment variable for later usage.

    ```
    export PROJECT_AUTH_METHOD_ID=<PROJECT_AUTH_METHOD_ID_FROM_ABOVE>
    ```

    Before continuing to the next challenge, be sure to add the environment variables you set above to the `~/.bashrc`
    file so they can be used across sessions.

    ```
    echo "export ORG_SCOPE_ID=$ORG_SCOPE_ID" >> ~/.bashrc
    echo "export PROJECT_SCOPE_ID=$PROJECT_SCOPE_ID" >> ~/.bashrc
    ```

    Congratulations! You've created your first auth methods. Next, you'll need to create an account.
  tabs:
  - title: Controller
    type: terminal
    hostname: boundary-controller
  - title: Worker
    type: terminal
    hostname: boundary-worker
  - title: Boundary UI
    type: service
    hostname: boundary-controller
    port: 9200
  - title: VS Code
    type: service
    hostname: boundary-controller
    port: 8443
  difficulty: advanced
  timelimit: 600
- slug: configure-admin-users-and-roles
  id: j986bk9afoar
  type: challenge
  title: Configure Admin Users and Roles
  teaser: Learn to setup the admin users and roles in Boundary to seed your production deployment.
  notes:
  - type: text
    contents: |-
      - Account: TODO
      - User: Any entity authorized to access Boundary using authentication credentials specific to one of the configured authentication methods. A user can belong to zero or more groups.
      - Role: Collection of capabilities granted to any principal (user, group, or project) the role is assigned to. A role belongs to one and only one scope, and owns zero or more direct grants.
  assignment: |-
    # Configure Admin Users and Roles

    In the last challenge, you learned how to create auth methods in Boundary. After you set up your auth methods in
    Boundary, you need to create some accounts, users and roles. You'll start with admin users, and will configure other
    types of users in later challenges.

    Accounts represent external notions of a particular entity. Among other use-cases, this mechanism allows for an
    easy way to switch users to new IdPs within the organization deploying Boundary.

    ---

    Create a login account for the admin user for the org auth method.

    ```
    boundary accounts create password \
      -recovery-config /root/boundary-controller-recovery.hcl \
      -login-name "admin_user" \
      -password "foofoofoo" \
      -auth-method-id $PROJECT_AUTH_METHOD_ID
    ```

    Example output:

    ```
    Account information:
      Auth Method ID:      ampw_YXiGz3OWHI
      Created Time:        Thu, 08 Jul 2021 18:09:35 UTC
      ID:                  acctpw_nTGqpEt4OK
      Type:                password
      Updated Time:        Thu, 08 Jul 2021 18:09:35 UTC
      Version:             1

      Scope:
        ID:                o_tc3qudleXh
        Name:              HashiCups Engineering
        Parent Scope ID:   global
        Type:              org

    <...truncated...>
    ```

    Grab the account ID from the output and store it in an environment variable for later usage.

    ```
    export ADMIN_USER_ACCOUNT_ID=<ADMIN_USER_ACCOUNT_ID_FROM_ABOVE>
    ```

    TODO: Then create a login account for the admin user for the project auth method.

    TODO: accounts / users / roles

    Now create a user and associate that user with the login account you just created. This user will also be
    the principal in the role you create in the following step.

    ```
    boundary users create -scope-id $ORG_SCOPE_ID \
      -recovery-config /root/boundary-controller-recovery.hcl \
      -name "admin_user" \
      -description "My user!"
    ```

    Example output:

    ```
    User information:
      Created Time:        Thu, 08 Jul 2021 18:11:17 UTC
      Description:         My user!
      ID:                  u_7QXZs7ldt3
      Name:                admin_user
      Updated Time:        Thu, 08 Jul 2021 18:11:17 UTC
      Version:             1

      Scope:
        ID:                o_tc3qudleXh
        Name:              HashiCups
        Parent Scope ID:   global
        Type:              org

    <...truncated...>
    ```

    Grab the user ID from the output and store it in an environment variable for later usage.

    ```
    export ADMIN_USER_ID=<ADMIN_USER_ID_FROM_ABOVE>
    ```

    You have now created your login account and user. It's time to associate those with some baseline roles.

    ---

    # Create Roles to Manage Scopes

    The following describes the four baseline roles you'll need to create to manage resources within the org and
    project scopes created above. These roles are similar to the roles created for you if generation had not been
    skipped during `boundary database init` when executed with the `-skip-initial-login-role-creation` flag, Declaring
    roles explicitly allows you to manage them independently and fully within Terraform or via the CLI. In doing so,
    you can precisely define their access.

    The following example creates 4 roles:

    - To allow anonymous (unauthenticated) users the ability to list scopes and auth methods in the `global` scope.
    - To allow anonymous (unauthenticated) users the ability to list scopes and auth methods in the org scope.
    - To allow `admin_user` user administration grants at the org scope.
    - To allow `admin_user` user administration grants at the project scope.

    First, create global anonymous listing roles.

    ```
    boundary roles create -name 'global_anon_listing' \
      -recovery-config /root/boundary-controller-recovery.hcl \
      -scope-id 'global'
    ```

    Example output:

    ```
    Role information:
      Created Time:        Thu, 08 Jul 2021 18:15:12 UTC
      Grant Scope ID:      global
      ID:                  r_h28yjg9dhH
      Name:                global_anon_listing
      Updated Time:        Thu, 08 Jul 2021 18:15:12 UTC
      Version:             1

      Scope:
        ID:                global
        Name:              global
        Type:              global

    <...truncated...>
    ```

    Grab the global anon listing ID from the output and store it in an environment variable for later usage.

    ```
    export GLOBAL_ANON_LISTING_ID=<GLOBAL_ANON_LISTING_ID_FROM_ABOVE>
    ```

    Then, add the required grants and principals to the global anonymous listing ID.

    ```
    boundary roles add-grants -id $GLOBAL_ANON_LISTING_ID \
      -recovery-config /root/boundary-controller-recovery.hcl \
      -grant 'id=*;type=auth-method;actions=list,authenticate' \
      -grant 'id=*;type=scope;actions=list,no-op' \
      -grant 'id={{account.id}};actions=read,change-password'

    boundary roles add-principals -id $GLOBAL_ANON_LISTING_ID \
      -recovery-config /root/boundary-controller-recovery.hcl \
      -principal 'u_anon'
    ```

    Example output:

    ```
    Role information:
      Created Time:        Thu, 08 Jul 2021 18:15:12 UTC
      Grant Scope ID:      global
      ID:                  r_h28yjg9dhH
      Name:                global_anon_listing
      Updated Time:        Thu, 08 Jul 2021 18:17:10 UTC
      Version:             2

      Scope:
        ID:                global
        Name:              global
        Type:              global

    <...truncated...>

    Role information:
      Created Time:        Thu, 08 Jul 2021 18:15:12 UTC
      Grant Scope ID:      global
      ID:                  r_h28yjg9dhH
      Name:                global_anon_listing
      Updated Time:        Thu, 08 Jul 2021 18:17:11 UTC
      Version:             3

      Scope:
        ID:                global
        Name:              global
        Type:              global

    <...truncated...>
    ```

    Then, you'll need to create the anonymous listing role for org scope.

    ```
    boundary roles create -name 'org_anon_listing' \
      -recovery-config /root/boundary-controller-recovery.hcl \
      -scope-id $ORG_SCOPE_ID
    ```

    Example output:

    ```
    Role information:
      Created Time:        Thu, 08 Jul 2021 18:18:26 UTC
      Grant Scope ID:      o_tc3qudleXh
      ID:                  r_u0dn7mU3uh
      Name:                org_anon_listing
      Updated Time:        Thu, 08 Jul 2021 18:18:26 UTC
      Version:             1

      Scope:
        ID:                o_tc3qudleXh
        Name:              HashiCups
        Parent Scope ID:   global
        Type:              org

    <...truncated...>
    ```

    Grab the org anon listing ID from the output and store it in an environment variable for later usage.

    ```
    export ORG_ANON_LISTING_ID=<ORG_ANON_LISTING_ID_FROM_ABOVE>
    ```

    Then, add the required grants and principals to the org anonymous listing ID.

    ```
    boundary roles add-grants -id $ORG_ANON_LISTING_ID \
      -recovery-config /root/boundary-controller-recovery.hcl \
      -grant 'id=*;type=auth-method;actions=list,authenticate' \
      -grant 'type=scope;actions=list' \
      -grant 'id={{account.id}};actions=read,change-password'

    boundary roles add-principals -id $ORG_ANON_LISTING_ID \
      -recovery-config /root/boundary-controller-recovery.hcl \
      -principal 'u_anon'
    ```

    Example output:

    ```
    Role information:
      Created Time:        Thu, 08 Jul 2021 18:18:26 UTC
      Grant Scope ID:      o_tc3qudleXh
      ID:                  r_u0dn7mU3uh
      Name:                org_anon_listing
      Updated Time:        Thu, 08 Jul 2021 18:22:27 UTC
      Version:             2

      Scope:
        ID:                o_tc3qudleXh
        Name:              HashiCups
        Parent Scope ID:   global
        Type:              org

    <...truncated...>

    Role information:
      Created Time:        Thu, 08 Jul 2021 18:18:26 UTC
      Grant Scope ID:      o_tc3qudleXh
      ID:                  r_u0dn7mU3uh
      Name:                org_anon_listing
      Updated Time:        Thu, 08 Jul 2021 18:22:28 UTC
      Version:             3

      Scope:
        ID:                o_tc3qudleXh
        Name:              HashiCups
        Parent Scope ID:   global
        Type:              org

    <...truncated...>
    ```

    Create the org admin role for `admin_user`.

    ```
    boundary roles create -name 'org_admin' \
        -recovery-config /root/boundary-controller-recovery.hcl \
        -scope-id 'global' \
        -grant-scope-id $ORG_SCOPE_ID
    ```

    Example output:

    ```
    Role information:
      Created Time:        Thu, 08 Jul 2021 18:24:01 UTC
      Grant Scope ID:      o_tc3qudleXh
      ID:                  r_4xpg4AbE04
      Name:                org_admin
      Updated Time:        Thu, 08 Jul 2021 18:24:01 UTC
      Version:             1

      Scope:
        ID:                global
        Name:              global
        Type:              global

    <...truncated...>
    ```

    Grab the org admin ID from the output and store it in an environment variable for later usage.

    ```
    export ORG_ADMIN_ID=<ORG_ADMIN_ID_FROM_ABOVE>
    ```

    Then, add the required grants and principals to the org admin ID.

    ```
    boundary roles add-grants -id $ORG_ADMIN_ID \
      -recovery-config /root/boundary-controller-recovery.hcl \
      -grant 'id=*;type=*;actions=*'

    boundary roles add-principals -id $ORG_ADMIN_ID \
      -recovery-config /root/boundary-controller-recovery.hcl \
      -principal $ADMIN_USER_ID
    ```

    Example output:

    ```
    Role information:
      Created Time:        Thu, 08 Jul 2021 18:24:01 UTC
      Grant Scope ID:      o_tc3qudleXh
      ID:                  r_4xpg4AbE04
      Name:                org_admin
      Updated Time:        Thu, 08 Jul 2021 18:29:43 UTC
      Version:             2

      Scope:
        ID:                global
        Name:              global
        Type:              global

    <...truncated...>

    Role information:
      Created Time:        Thu, 08 Jul 2021 20:39:30 UTC
      Grant Scope ID:      o_ya8JEJso6y
      ID:                  r_oYoJ05W5zI
      Name:                org_admin
      Updated Time:        Thu, 08 Jul 2021 20:41:21 UTC
      Version:             3

      Scope:
        ID:                global
        Name:              global
        Type:              global

    <...truncated...>
    ```

    Create the project admin for `admin_user`.

    ```
    boundary roles create -name 'project_admin' \
      -recovery-config /tmp/recovery.hcl \
      -scope-id $ORG_SCOPE_ID \
      -grant-scope-id $PROJECT_SCOPE_ID
    ```

    Example output:

    ```
    Role information:
      Created Time:        Thu, 08 Jul 2021 20:46:20 UTC
      Grant Scope ID:      p_4Z5uFpAkBZ
      ID:                  r_Uh8SiJtFpg
      Name:                project_admin
      Updated Time:        Thu, 08 Jul 2021 20:46:20 UTC
      Version:             1

      Scope:
        ID:                o_ya8JEJso6y
        Name:              HashiCups
        Parent Scope ID:   global
        Type:              org

    <...truncated...>
    ```

    Grab the project user ID from the output and store it in an environment variable for later usage.

    ```
    export PROJECT_ADMIN_ID=<PROJECT_ADMIN_ID_FROM_ABOVE>
    ```

    Then, add the required grants and principals to the project admin ID.

    ```
    boundary roles add-grants -id $PROJECT_ADMIN_ID \
      -recovery-config /root/boundary-controller-recovery.hcl \
      -grant 'id=*;type=*;actions=*'

    boundary roles add-principals -id $PROJECT_ADMIN_ID \
      -recovery-config /root/boundary-controller-recovery.hcl \
      -principal $ADMIN_USER_ID
    ```

    Example output:

    ```
    Role information:
      Created Time:        Thu, 08 Jul 2021 20:45:52 UTC
      Grant Scope ID:      p_4Z5uFpAkBZ
      ID:                  r_x6Yv15DBLy
      Name:                project_admin
      Updated Time:        Thu, 08 Jul 2021 20:46:52 UTC
      Version:             2

    <...truncated...>

    Role information:
      Created Time:        Thu, 08 Jul 2021 20:45:52 UTC
      Grant Scope ID:      p_4Z5uFpAkBZ
      ID:                  r_x6Yv15DBLy
      Name:                project_admin
      Updated Time:        Thu, 08 Jul 2021 20:46:52 UTC
      Version:             3

      Scope:
        ID:                o_ya8JEJso6y
        Name:              HashiCups
        Parent Scope ID:   global
        Type:              org

    <...truncated...>
    ```

    Finally, log in as your new user.

    ```
    boundary authenticate password \
      -auth-method-id $PROJECT_AUTH_METHOD_ID \
      -login-name admin_user \
      -password foofoofoo
    ```

    Example output:

    ```
    Authentication information:
      Account ID:      acctpw_06knpvPLCZ
      Auth Method ID:  ampw_JzC1XNwLtJ
      Expiration Time: Thu, 15 Jul 2021 22:41:10 UTC
      User ID:         u_ckElkdIo8V

    Storing the token in a keyring was disabled. The token is:
    at_bs81pgyoFg_s1N9twB2L8pfRPJhqdBzP1re8df48twb9Ww1655esNcU2T4UyCLJXsjugb9iRWR7cduoKCNFQvd6VWdymZX3xq46xRDKVEVaiHqVoQEV3qMyndK1UF6KQxxJE2s
    Please be sure to store it safely!
    ```

    Grab the token from the output and store it in an environment variable for later usage.

    ```
    export BOUNDARY_TOKEN=<BOUNDARY_TOKEN>
    ```

    The last thing you shold do is put all the environment variables you defined into
    your `~/.bashrc` file for future usage.

    ```
    echo "export ORG_AUTH_METHOD_ID=<ORG_AUTH_METHOD_ID_FROM_ABOVE>" >> ~/.bashrc
    echo "export PROJECT_AUTH_METHOD_ID=$PROJECT_AUTH_METHOD_ID" >> ~/.bashrc
    echo "export ADMIN_USER_ACCOUNT_ID=$ADMIN_USER_ACCOUNT_ID" >> ~/.bashrc
    echo "export GLOBAL_ANON_LISTING_ID=$GLOBAL_ANON_LISTING_ID" >> ~/.bashrc
    echo "export ORG_ANON_LISTING_ID=$ORG_ANON_LISTING_ID" >> ~/.bashrc
    echo "export ORG_ADMIN_ID=$ORG_ADMIN_ID" >> ~/.bashrc
    echo "export PROJECT_ADMIN_ID=$PROJECT_ADMIN_ID" >> ~/.bashrc
    echo "export ADMIN_USER_USERNAME=$ADMIN_USER_USERNAME" >> ~/.bashrc
    echo "export ADMIN_USER_PASSWORD=$ADMIN_USER_PASSWORD" >> ~/.bashrc
    echo "export BOUNDARY_TOKEN=$BOUNDARY_TOKEN" >> ~/.bashrc
    ```

    Congratulations! You have setup the initial resources in Boundary, and retrieved your first Boundary token.
  tabs:
  - title: Controller
    type: terminal
    hostname: boundary-controller
  - title: Worker
    type: terminal
    hostname: boundary-worker
  - title: Boundary UI
    type: service
    hostname: boundary-controller
    port: 9200
  - title: VS Code
    type: service
    hostname: boundary-controller
    port: 8443
  difficulty: advanced
  timelimit: 3600
- slug: configure-and-connect-to-your-first-target-with-ssh
  id: wm0enxxguhie
  type: challenge
  title: Configure Your First Host and Connect with SSH
  teaser: Use Boundary as a TCP proxy to SSH to a remote host.
  notes:
  - type: text
    contents: 'TODO: add a diagram of the ref architecture and components to the notes and tell the user they can go view that if they need a refresher.'
  - type: text
    contents: |-
      In this challenge, you will learn about the following Boundary resources.

      - Host: Computing element with a network address reachable from Boundary.
      - Host catalog: Permission boundary modeled as a container containing scopes forming a tree.
      - Host set: Subset of hosts from the set of hosts of the host catalog it belongs to. A host set belongs to one and only one host; therefore, it gets deleted when its host catalog is deleted.
      - Target: Networked service a user can connect to and interact with through Boundary. A target can contain zero or more host sets.
  assignment: |-
    # Configure Your First Target and Connect with SSH

    [Targets](https://www.boundaryproject.io/docs/concepts/domain-model/targets) are Boundary resources that contain
    one or more [host sets](https://www.boundaryproject.io/docs/concepts/domain-model/host-sets). A target allows
    Boundary users to define an endpoint with a default port and a protocol to establish a session. Unless specified
    with a `-host-id` flag, Boundary will choose one
    [Host](https://www.boundaryproject.io/docs/concepts/domain-model/hosts) in the host set to connect to at random.

    In this challenge you are going to create a host catalog, add a host set with a new host to it, define it as a
    target, and finally - connect to that host via Boundary.

    # TODO: explain the existence of the Boundary worker as that is what they are going to connect to.

    ---

    You will use the project scope you created for this challenge. List the scopes you created for the org.

    ```
    boundary scopes list -scope-id=$ORG_SCOPE_ID
    ```

    You should output similar to the below text.

    ```
    Scope information:
      ID:                    p_E5Hi8BQlJm
        Version:             1
        Name:                HashiCups App
        Authorized Actions:
          no-op
          read
          update
          delete
    ```

    You should recognize the "HashiCups App" project scope you created in the previous challenge. Currently, there
    are no targets in the scope. You can confirm that with the following command.

    ```
    boundary targets list -scope-id=$PROJECT_SCOPE_ID
    ```

    Example output:

    ```
    No targets found
    ```

    At the end of this challenge, you will have a target that you can connect to, but first, you must configure
    a few things.

    The first thing you'll need to create is a *host catalog* named "HashiCups App" in the "HashiCups App" project
    scope.

    ```
    boundary host-catalogs create static \
      -scope-id=$PROJECT_SCOPE_ID \
      -name="HashiCups App" \
      -description="For HashiCups App usage"
    ```

    Example output:

    ```
    Host Catalog information:
      Created Time:        Mon, 12 Jul 2021 16:48:28 UTC
      Description:         For HashiCups App usage
      ID:                  hcst_RVwh1LxNMa
      Name:                HashiCups App
      Type:                static
      Updated Time:        Mon, 12 Jul 2021 16:48:28 UTC
      Version:             1

    <...truncated..>
    ```

    Grab the host catalog ID from the output and store it in an environment variable for later usage.

    ```
    export HOST_CATALOG_ID=<HOST_CATALOG_ID_FROM_ABOVE>
    ```

    Next, create a new *host*.

    TODO: Explain that `boundary-worker` resolves to the extra host.

    ```
    boundary hosts create static \
      -name=worker-host \
      -description="Worker host" \
      -address="boundary-worker" \
      -host-catalog-id=$HOST_CATALOG_ID
    ```

    Example output:

    ```
    Host information:
      Created Time:        Mon, 12 Jul 2021 20:37:34 UTC
      Description:         Worker host
      Host Catalog ID:     hcst_cMzXXWNylL
      ID:                  hst_mnmBqpd9ky
      Name:                worker-host
      Type:                static
      Updated Time:        Mon, 12 Jul 2021 20:37:34 UTC
      Version:             1

    <...truncated..>
    ```

    Grab the host ID from the output and store it in an environment variable for later usage.

    ```
    export WORKER_HOST_ID=<WORKER_HOST_ID_FROM_ABOVE>
    ```

    A *host set* groups together hosts, which provide logically equivalent services. Targets work off of host sets,
    so even if there is only one hosts, you will still create a host set to contain one host.

    Create a host set named "test-machines".

    ```
    boundary host-sets create static \
      -name="test-machines" \
      -description="Test machine host set" \
      -host-catalog-id=$HOST_CATALOG_ID
    ```

    Example output:

    ```
    Host Set information:
      Created Time:        Mon, 12 Jul 2021 21:19:47 UTC
      Description:         Test machine host set
      Host Catalog ID:     hcst_nsnTh5hZsc
      ID:                  hsst_mr3TQkIVdd
      Name:                test-machines
      Type:                static
      Updated Time:        Mon, 12 Jul 2021 21:19:47 UTC
      Version:             1

    <...truncated..>
    ```

    Grab the host set ID from the output and store it in an environment variable for later usage.

    ```
    export HOST_SET_ID=<HOST_SET_ID_FROM_ABOVE>
    ```

    Now you can add the hosts you created above to the host set.

    ```
    boundary host-sets add-hosts \
      -id=$HOST_SET_ID \
      -host=$WORKER_HOST_ID
    ```

    With the hosts added to the host set and the host catalog, it's time to define the target that you will ultimately
    connect to. You'll create a target named "tests", set the default port to `22` for SSH, and set the session
    connection limit to `-1`, which allows unlimited connections.

    ```
    boundary targets create tcp \
      -name="tests" \
      -description="Test target" \
      -default-port=22 \
      -scope-id=$PROJECT_SCOPE_ID \
      -session-connection-limit="-1"
    ```

    Example output:

    ```
    Target information:
      Created Time:               Mon, 12 Jul 2021 20:46:41 UTC
      Description:                Test SSH target
      ID:                         ttcp_QWFzLzmVLK
      Name:                       ssh-test-targets
      Session Connection Limit:   -1
      Session Max Seconds:        28800
      Type:                       tcp
      Updated Time:               Mon, 12 Jul 2021 20:46:41 UTC
      Version:                    1

    <...truncated..>
    ```

    Grab the target ID from the output and store it in an environment variable for later usage.

    ```
    export TARGET_ID=<TARGET_ID_FROM_ABOVE>
    ```

    The last bit of configuration you'll need to complete is adding the host set you created above to the target you
    just created.

    ```
    boundary targets add-host-sets \
      -id=$TARGET_ID \
      -host-set=$HOST_SET_ID
    ```

    Example output:

    ```
    Host Set information:
      Created Time:        Mon, 12 Jul 2021 20:40:08 UTC
      Description:         Test machine host set
      Host Catalog ID:     hcst_cMzXXWNylL
      ID:                  hsst_pl5Yv1yf7Y
      Name:                test-machines
      Type:                static
      Updated Time:        Mon, 12 Jul 2021 20:46:31 UTC
      Version:             2

    <...truncated..>

    Host IDs:
      hst_mnmBqpd9ky
    ```

    And you're done configuring your target.  You can view the details of the target using the `targets read` command.
    Run the following command and confirm you see your host set added in the output.

    ```
    boundary targets read -id=$TARGET_ID
    ```

    Example output:

    ```
    Target information:
      Created Time:               Wed, 30 Jun 2021 00:37:51 UTC
      Description:                Provides an initial target in Boundary
      ID:                         ttcp_s3ngxT2ofL
      Name:                       Generated target
      Session Connection Limit:   -1
      Session Max Seconds:        28800
      Type:                       tcp
      Updated Time:               Wed, 30 Jun 2021 00:37:51 UTC
      Version:                    1

    <...truncated..>

      Host Sets:
        Host Catalog ID:          hcst_jLHX9jl2kL
        ID:                       hsst_4eg3luVSyC

      Attributes:
        Default Port:             22
    ```

    You are ready to connect to the target. You can paste the target ID into the below command to connect.

    ```
    boundary connect ssh -target-id=$TARGET_ID
    ```

    Be sure to respond `yes` when asked if you are sure you want to continue connecting. You will then be dropped
    into the shell for the `boundary-worker`, connecting your SSH session via Boundary.

    You have now successfully connected to your first target using via SSH using Boundary! Next, you'll learn
    how to use Boundary to connect to a Postgres instance using TCP.
  tabs:
  - title: Controller
    type: terminal
    hostname: boundary-controller
  - title: Worker
    type: terminal
    hostname: boundary-worker
  - title: Boundary UI
    type: service
    hostname: boundary-controller
    port: 9200
  - title: VS Code
    type: service
    hostname: boundary-controller
    port: 8443
  difficulty: advanced
  timelimit: 3600
- slug: configure-and-connect-to-postgres-with-tcp
  id: 1ut7x9mfbihc
  type: challenge
  title: Configure and Connect to Postgres with TCP
  teaser: Use Boundary as a TCP proxy to connect to a Postgres instance.
  notes:
  - type: text
    contents: TODO
  assignment: |-
    # Configure and Connect to Postgres with TCP


    ---

    Now that you have created a new org and project, you can configure the new hosts that you will connect to. All
    hosts must be part of a host set, both of which must be within a host catalog, so you need to create a host catalog
    first.

    ```
    boundary host-catalogs create static \
        -scope-id=$PROJECT_ID \
        -name=DevOps \
        -description="For DevOps usage"
    ```

    Example output:

    ```
    TODO
    ```

    Then put the newly created host catalog ID into the environment.

    ```
    export HOST_CATALOG_ID=<HOST_CATALOG_ID_FROM_ABOVE>
    ```

    TODO: one-liner

    Now, create a new host named, "postgres" with description, "Postgres host" under the newly created host catalog.

    ```
    boundary hosts create static -name=postgres -description="Postgres host" \
    -address="127.0.0.1" -host-catalog-id=$HOST_CATALOG_ID
    ```

    Example output:

    ```
    TODO
    ```

    Repeat the step to create another host named, `localhost`.

    ```
    boundary hosts create static -name=localhost -description="Localhost for testing" \
      -address="localhost" -host-catalog-id=$HOST_CATALOG_ID
    ```

    Example output:

    ```
    TODO
    ```

    ```
    boundary host-sets create static -name="test-machines" \
    -description="Test machine host set" -host-catalog-id=$HOST_CATALOG_ID
    ```

    Example output:

    ```
    TODO
    ```

    ```
    boundary hosts list -host-catalog-id=$HOST_CATALOG_ID
    ```

    Example output:

    ```
    TODO
    ```

    ```
    boundary host-sets add-hosts -id=<host_set_id> -host=<postgres_host_id> \
      -host=<localhost_host_id>
    ```

    Example output:

    ```
    TODO
    ```

    ```
    boundary targets create tcp -name="tests" -description="Test target" \
        -default-port=22 -scope-id=$PROJECT_ID -session-connection-limit="-1"
    ```

    Example output:

    ```
    TODO
    ```

    ```
    boundary targets add-host-sets -id=<target_id> -host-set=<host_set_id>
    ```

    Example output:

    ```
    TODO
    ```

    Connect to it...
  tabs:
  - title: Controller
    type: terminal
    hostname: boundary-controller
  - title: Worker
    type: terminal
    hostname: boundary-worker
  - title: Boundary UI
    type: service
    hostname: boundary-controller
    port: 9200
  - title: VS Code
    type: service
    hostname: boundary-controller
    port: 8443
  difficulty: advanced
  timelimit: 3600
- slug: configure-users-roles-and-groups
  id: niaptwmxppym
  type: challenge
  title: Configure Users, Roles, and Groups
  teaser: TODO
  notes:
  - type: text
    contents: |-
      - User: Any entity authorized to access Boundary using authentication credentials specific to one of the configured authentication methods. A user can belong to zero or more groups.
      - Group: Collection of users used for access control. A group is owned by one and only one scope.
      - Role: Collection of capabilities granted to any principal (user, group, or project) the role is assigned to. A role belongs to one and only one scope, and owns zero or more direct grants.
  assignment: |-
    '*Configure Users and Groups*'

    # TODO: create a DevOps group that has the SSH Access
    # TODO: create a DBAs group that has the database Access

    ```
    boundary auth-methods create password \
      -scope-id=$ORG_ID \
      -name="hashicups_auth_method" \
      -description="HashiCups auth method"
    ```

    ```
    boundary accounts create password \
      -auth-method-id=<PROJECT_AUTH_METHOD_ID_FROM_ABOVE> \
      -login-name="hashicups_admin" \
      -password="password" \
      -name=hashicups_admin \
      -description="HashiCups Admin Demo Account"
    ```

    Example output:

    ```
    TODO
    ```

    ```
    boundary users create -name="tester01" -description="A test user" -scope-id=$ORG_ID
    ```

    Example output:

    ```
    TODO
    ```

    ```
    boundary users set-accounts -id=<user_id> -account=<account_id>
    ```

    Example output:

    ```
    TODO
    ```

    ```
    boundary authenicate password -login-name="tester01" -password="supersecure" \
    -auth-method-id=<PROJECT_AUTH_METHOD_ID>
    ```

    Example output:

    ```
    TODO
    ```

    ```
    boundary authenticate password -auth-method-id=ampw_1234567890 \
    -login-name=admin -password=password
    ```

    Example output:

    ```
    TODO
    ```

    ```
    boundary groups create -name="group01" -description="A test group" -scope-id=$ORG_ID
    ```

    Example output:

    ```
    TODO
    ```

    ```
    boundary groups add-members -id=<group_id> -member=<user_id>
    ```

    Example output:

    ```
    TODO
    ```
  difficulty: advanced
  timelimit: 600
- slug: explore-the-admin-ui
  id: wyaxsa25ysd1
  type: challenge
  title: Explore the Admin UI
  teaser: Get familiar with the Boundary Admin UI and explore what you created.
  notes:
  - type: text
    contents: |-
      Boundary enables simple and secure access to dynamic infrastructure by:

      - Identity-based access controls: Streamline just-in-time access to privileged sessions (e.g. TCP, SSH, RDP) for users and applications. Tightly control access permissions with extensible role-based access controls.
      - Access Automation: Define your perimeter of resources, identities, and access controls as code through Boundary's fully-instrumented Terraform Provider, REST API, CLI, and SDK. Automate the discovery of new resources and enforcement of existing policies as resources are provisioned.
      - Session Visibility: Security administrators gain monitor and managed the privileged sessions established with Boundary. Export session logs to your analytics tool of choice.

      In this track, you will learn how to use Boundary to dynamically access hosts via SSH, as well as remote Postgres database access.
  - type: text
    contents: Traditional approaches like SSH bastion hosts or VPNs that require distributing and managing credentials, configure network controls like firewalls, and expose the private network. Boundary provides a secure way to access to hosts and critical systems without having to manage credentials or expose your network.
  - type: text
    contents: "| Resource | Description |\n| --- | --- |\n| Scope\t| Abstract permission boundary modeled as a container. A scope can contain scopes forming a tree. |\n| Organization | Top-level container (scope) which owns zero to many projects and zero to many authentication methods. An organization inherits from scope allowing it to own zero to many groups, roles, policies, targets, host catalogs or credential stores. |\n| Project\t| Child scope of an organization. |\n| User | Any entity authorized to access Boundary using authentication credentials specific to one of the configured authentication methods. A user can belong to zero or more groups. |\n| Group\t| Collection of users used for access control. A group is owned by one and only one scope. |\n| Role | Collection of capabilities granted to any principal (user, group, or project) the role is assigned to. A role belongs to one and only one scope, and owns zero or more direct grants |\n| Host | Computing element with a network address reachable from Boundary. |\n| Host catalog | Permission boundary modeled as a container containing scopes forming a tree. |\n| Host set |Subset of hosts from the set of hosts of the host catalog it belongs to. A host set belongs to one and only one host; therefore, it gets deleted when its host catalog is deleted. |\n| Target | Networked service a user can connect to and interact with through Boundary. A target can contain zero or more host sets. |"
  - type: text
    contents: '''TODO: Explain Controllers vs Workers and show/ reference architecture.'''
  assignment: |-
    # Explore the Admin Console

    Boundary's Admin Console provides an easy way to manage resources. Before using Boundary to securely access any
    dynamic infrastructure, you should take a tour of the console to understand all the components.

    TODO: update or remove this based on the direction of the track.

    In this track, Boundary has already been
    [installed](https://learn.hashicorp.com/tutorials/boundary/getting-started-install?in=boundary/getting-started)
    for you. A Boundary Controller and a Boundary Worker are also already running. To make your initial tour through
    Boundary a little more interesting, Boundary was
    [initialized with generated resources](https://www.boundaryproject.io/docs/installing/no-gen-resources).

    What are generated resources? Boundary can automatically generate a number of resources to make getting started
    easier. Default scopes, auth methods, user, account, and targets are just some of the resources Boundary will
    generate unless you tell it not to.

    If you are not familiar with installing Boundary, the reference architecture, or concepts like scopes, auth methods,
    users, accounts, and more - check out the [Install and Configure Boundary Track](TODO).

    ---

    # Exploring Roles, Principals and Grants in the Admin UI

    Open the Boundary UI tab. You should see a login screen. To access the password for the `admin` user that was
    generated for you, grab it from the environment in the Controller terminal tab.

    ```
    echo $ADMIN_PASSWORD
    ```

    Once you have logged in, you will see the home screen containing all the top level resources in Boundary. Select
    *Roles* in the left sidebar, then select the "Administration" role.

    Notice that `admin` user is listed. *User*, *group*, and *project* are a type of principal which can be assigned to
    roles.

    Click on the *Grants* tab to view the permissions allowed on this role.  Grants represent strings of actions on
    resources: `id=<resource_id>; action=<actions>`

    The grant for Administration role indicates that all actions (`actions=*`) on all resources (`id=*;type=*`) are
    permitted. Refer to the [documentation](https://www.boundaryproject.io/docs/concepts/security/permissions#permission-grant-formats)
    for more details.

    Return to the *Roles* list and select *Login and Default Grants* role.  Click *Grants* to view its permissions.

    A role can have multiple grants defined. Those grants are deleted when the role is deleted. A grant is also deleted
    if its associated resource is deleted.

    Select *Projects* and then *Generated project scope*. Notice that you can see *Sessions*, *Targets* and
    *Host Catalogs*.

    Select *Host Catalogs -> Generated host catalog -> Host Sets -> Generated host set* to view the details of the
    *Host Set*. You can then select the *Hosts* tab to view attached hosts.

    ---

    Now that you have taken a tour of the admin UI and understand the generated resources, you are ready to connect
    to your first target via Boundary.
  tabs:
  - title: Controller
    type: terminal
    hostname: boundary-controller
  - title: Worker
    type: terminal
    hostname: boundary-worker
  - title: Boundary UI
    type: service
    hostname: boundary-controller
    port: 9200
  - title: VS Code
    type: service
    hostname: boundary-controller
    port: 8443
  difficulty: advanced
  timelimit: 3600
checksum: "10792721242361152161"
