slug: boundary-ssh-and-database
id: adnyt8negprv
type: track
title: Using Boundary for SSH and Database Access
teaser: TODO
description: TODO
icon: https://storage.googleapis.com/instruqt-frontend/assets/hashicorp/tracks/boundary.png
tags:
- terraform
owner: hashicorp
developers:
- neil@hashicorp.com
private: true
published: false
show_timer: true
challenges:
- slug: explore-the-admin-ui
  id: wyaxsa25ysd1
  type: challenge
  title: Explore the Admin UI
  teaser: Get familiar with Bonudary's admin UI before jumping into accessing targets.
  notes:
  - type: text
    contents: |-
      Boundary enables simple and secure access to dynamic infrastructure by:

      - Identity-based access controls: Streamline just-in-time access to privileged sessions (e.g. TCP, SSH, RDP) for users and applications. Tightly control access permissions with extensible role-based access controls.
      - Access Automation: Define your perimeter of resources, identities, and access controls as code through Boundary's fully-instrumented Terraform Provider, REST API, CLI, and SDK. Automate the discovery of new resources and enforcement of existing policies as resources are provisioned.
      - Session Visibility: Security administrators gain monitor and managed the privileged sessions established with Boundary. Export session logs to your analytics tool of choice.

      In this track, you will learn how to use Boundary to dynamically access hosts via SSH, as well as remote Postgres database access.
  - type: text
    contents: Traditional approaches like SSH bastion hosts or VPNs that require distributing
      and managing credentials, configure network controls like firewalls, and expose
      the private network. Boundary provides a secure way to access to hosts and critical
      systems without having to manage credentials or expose your network.
  - type: text
    contents: 'TODO: Explain Controllers vs Workers.'
  - type: text
    contents: 'TODO: Explain Roles, Principals, Grants, Projects, Host Catalogs, etc.'
  - type: text
    contents: 'TODO: Show a picture of all the moving pieces here.'
  assignment: |-
    # Explore the Admin Console

    _TODO: make this more useful that the content in Learn_

    Boundary's Admin Console  provides an easy way to manage resources. Before using Bonudary to securely access any dynamic infrastructure,
    you should take a tour of the console to understand all the components.

    In this track, Boundary has already been [installed](https://learn.hashicorp.com/tutorials/boundary/getting-started-install?in=boundary/getting-started)
    for you. A Boundary Controller and a Boundary Worker are also already running. To make your initial
    tour through Boundary a little more interesting, Boundary was [initialized with the initial login role
    creation](https://www.boundaryproject.io/docs/installing/no-gen-resources#initialize-the-database).

    _TODO: link the other track that shows how to set everything up, and note that it should be done before this track to learn all the components._

    Identity is a core concept in Boundary. Identity is represented by two types of resources, mapping to common security principals:

    - [Users](https://www.boundaryproject.io/docs/concepts/domain-model/users), which represent distinct entities that can be tied to authentication accounts
    - [Groups](https://www.boundaryproject.io/docs/concepts/domain-model/groups), which are collections of Users that allow for easier access management

    [Roles](https://www.boundaryproject.io/docs/concepts/domain-model/roles) map users and groups to a set of grants, which provide the ability to perform actions within the system.

    ---

    # Exploring Roles, Principals and Grants in the Admin UI

    Open the Boundary UI tab. You should see a login screen.

    _TODO: instructions on how to get the admin password to login_

    Once you have logged in, you will see the home screen containing all the top level resources in Boundary. Select *Roles* in the left sidebar, then select the "Administration" role.

    Notice that `admin` user is listed. *User*, *group*, and *project* are a type of principal which can be assigned to roles.

    Click on the *Grants* tab to view the permissions allowed on this role.  Grants represent strings of actions on resources: `id=<resource_id>; action=<actions>`

    The grant for Administration role indicates that all actions (`actions=*`) on all resources (`id=*;type=*`) are permitted. Refer to the documentation for more details.

    Return to the *Roles* list and select *Login and Default Grants* role.  Click *Grants* to view its permissions.

    A role can have multiple grants defined. Those grants are deleted when the role is deleted. A grant is also deleted if its associated resource is deleted.

    Select *Projects* and then *Generated project scope*. Notice that you can see *Sessions*, *Targets* and *Host Catalogs*.

    Select *Host Catalogs -> Generated host catalog -> Host Sets -> Generated host set* to view the details of the *Host Set*. You can then select the *Hosts* tab to view attached hosts.

    ---

    TODO: move this to it's own challenge
    *Exploring Projects, Host Catalogs, Host Sets, Hosts and Targets in the Admin UI*

    TODO: move this to it's own challenge
    *Connecting to Your First Target*

    ```
    boundary authenticate password \
      -auth-method-id=ampw_CU9oKwC4Q4 \
      -login-name=admin \
      -password=nqiUrFmjlmRI84HHq71E
    ```

    Set the Boundary token.

    ```
    export BOUNDARY_TOKEN=<token_from_above>
    ```

    Get the details.

    ```
    boundary targets read -id=ttcp_ZvXVbGnDIq
    ```

    Connect.

    ```
    boundary connect ssh -target-id=ttcp_ZvXVbGnDIq
    // No workers error
    ```

    TODO: have the user create all their own stuff that is auto created above.
  tabs:
  - title: VS Code
    type: service
    hostname: workstation
    port: 8443
  - title: Terminal
    type: terminal
    hostname: workstation
  - title: Boundary UI
    type: service
    hostname: workstation
    port: 9200
  difficulty: advanced
  timelimit: 3600
- slug: configure-boundary
  id: yi1uavzhjjzw
  type: challenge
  title: Configure Boundary
  teaser: Build out the host catalog, host sets, hosts as well as some targets.
  notes:
  - type: text
    contents: TODO
  assignment: '*Configure Boundary*'
  tabs:
  - title: VS Code
    type: service
    hostname: workstation
    port: 8443
  - title: Terminal
    type: terminal
    hostname: workstation
  - title: Boundary UI
    type: service
    hostname: workstation
    port: 9200
  difficulty: advanced
  timelimit: 3600
- slug: connect-to-host-with-ssh
  id: kzy7pthbem69
  type: challenge
  title: Connect to Host with SSH
  teaser: Connect to a remote host with an SSH session brokered by Boundary
  notes:
  - type: text
    contents: TODO
  assignment: '*Connect to Host with SSH*'
  tabs:
  - title: VS Code
    type: service
    hostname: workstation
    port: 8443
  - title: Terminal
    type: terminal
    hostname: workstation
  - title: Boundary UI
    type: service
    hostname: workstation
    port: 9200
  difficulty: advanced
  timelimit: 3600
- slug: connect-to-database
  id: 29dntojnecqc
  type: challenge
  title: Connect to a Database
  teaser: Connect to a remote database with a session brokered by Boundary
  notes:
  - type: text
    contents: TODO
  assignment: '*Connect to a Database*'
  tabs:
  - title: VS Code
    type: service
    hostname: workstation
    port: 8443
  - title: Terminal
    type: terminal
    hostname: workstation
  - title: Boundary UI
    type: service
    hostname: workstation
    port: 9200
  difficulty: advanced
  timelimit: 3600
checksum: "689397905095276825"
