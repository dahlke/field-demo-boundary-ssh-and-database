#!/bin/bash -l

#########
# Install Postgres client
#########
apt-get install -y postgresql-client

#########
# Install Gnome Keyring and dbus-x11 as Boundary requires
#########
# TODO: do I even want to use this?
apt-get install -y gnome-keyring dbus-x11
apt-get install -y pass

export DISPLAY=:0
echo "export DISPLAY=:0" >> ~/.bashrc
export $(dbus-launch)

#########
# Put the username / password env vars in the bashrc for solve scripts
#########
export ADMIN_USERNAME="admin"
export ADMIN_PASSWORD="password"
export DBA_USERNAME="dbauser1"
export DBA_PASSWORD="password"

# Add the user name and passwords to the bashrc to make the solve scripts simpler
echo "export ADMIN_USERNAME=$ADMIN_USERNAME" >> ~/.bashrc
echo "export ADMIN_PASSWORD=$ADMIN_PASSWORD" >> ~/.bashrc
echo "export DBA_USERNAME=$DBA_USERNAME" >> ~/.bashrc
echo "export DBA_PASSWORD=$DBA_PASSWORD" >> ~/.bashrc

# TODO: this has to be run in the terminal
# eval "$(printf 'foobar\n' | gnome-keyring-daemon --unlock)"
# eval "$(printf 'foobar\n' | gnome-keyring-daemon --start)"

#########
# Set up Boundary Controller Config
#########

# TODO: use Vault for the keys eventually


cat <<-EOF > /etc/boundary.d/controller.hcl
listener "tcp" {
  purpose = "api"
  address = "0.0.0.0"
  tls_disable = "true"
}

listener "tcp" {
  purpose = "cluster"
  address = "0.0.0.0"
  tls_disable = "true"
}

controller {
  name = "boundary-controller"
  description = "Boundary controller"
  public_cluster_addr = "boundary-controller"
  database {
    url = "postgres://postgres:postgres@localhost:5432/boundary?sslmode=disable"
  }
}

# Root KMS configuration block: this is the root key for Boundary
# Use a production KMS such as Vault or AWS KMS for production installs
kms "aead" {
  purpose = "root"
  aead_type = "aes-gcm"
  key = "sP1fnF5Xz85RrXyELHFeZg9Ad2qt4Z4bgNHVGtD6ung="
  key_id = "global_root"
}

# Worker authorization KMS
# Use a production KMS such as Vault or AWS KMS for production installs
kms "aead" {
  purpose = "worker-auth"
  aead_type = "aes-gcm"
  key = "8fZBjCUfN0TzjEGLQldGY4+iE9AkOvCfjh7+p0GtRBQ="
  key_id = "global_worker-auth"
}

# Recovery KMS block: configures the recovery key for Boundary
# Use a production KMS such as Vault or AWS KMS for production installs
kms "aead" {
  purpose = "recovery"
  aead_type = "aes-gcm"
  key = "8fZBjCUfN0TzjEGLQldGY4+iE9AkOvCfjh7+p0GtRBQ="
  key_id = "global_recovery"
}

disable_mlock = true
EOF

cat <<-EOF > /etc/boundary.d/recovery.hcl
# Recovery KMS block: configures the recovery key for Boundary
# Use a production KMS such as Vault or AWS KMS for production installs
kms "aead" {
  purpose = "recovery"
  aead_type = "aes-gcm"
  key = "8fZBjCUfN0TzjEGLQldGY4+iE9AkOvCfjh7+p0GtRBQ="
  key_id = "global_recovery"
}

disable_mlock = true
EOF

#########
# Configure and Run Vault
#########
# TODO

#########
# Start a Postgres Instance and Initialize the Database
#########
docker run --name postgres -p 5432:5432 -e POSTGRES_PASSWORD=postgres -d postgres
sleep 3
export PGPASSWORD=postgres
psql -U postgres -h localhost -p 5432 -c "CREATE DATABASE boundary";
psql -U postgres -h localhost -p 5432 -c "CREATE USER boundary WITH PASSWORD 'boundary' SUPERUSER;"

# INIT_OUTPUT=$(boundary database init -config=/etc/boundary.d/controller.hcl -format json)
INIT_OUTPUT=$(boundary database init -skip-initial-login-role-creation -config=/etc/boundary.d/controller.hcl -format json)
touch /root/init-output.txt
echo $INIT_OUTPUT >> /root/init-output.txt

#########
# Run Boundary
#########
sudo chmod 664 /etc/systemd/system/boundary-controller.service
sudo systemctl daemon-reload
sudo systemctl enable boundary-controller
sudo systemctl start boundary-controller
systemctl status boundary-controller

exit 0
