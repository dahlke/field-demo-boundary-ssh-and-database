#!/bin/bash -l

# Enable bash history
HISTFILE=/root/.bash_history
set -o history

# Create the Org Scope
export ORG_SCOPE_ID=$( \
boundary scopes create -name 'HashiCups' -scope-id 'global' \
-recovery-config /root/boundary-controller-recovery.hcl \
-skip-admin-role-creation \
-skip-default-role-creation \
-format=json | jq -r .item.id)

echo "Org Scope ID:" $ORG_SCOPE_ID

# Create the Project Scope
export PROJECT_SCOPE_ID=$( \
boundary scopes create -name 'HashiCups App' -scope-id $ORG_SCOPE_ID \
-recovery-config /root/boundary-controller-recovery.hcl \
-skip-admin-role-creation \
-skip-default-role-creation \
-format=json | jq -r .item.id)

echo "Project Scope ID:" $PROJECT_SCOPE_ID

# Create the Auth Method
export AUTH_METHOD_ID=$(
boundary auth-methods create password \
-recovery-config /root/boundary-controller-recovery.hcl \
-scope-id $ORG_SCOPE_ID \
-name 'hashicups_auth_method' \
-description 'Password auth method for HashiCups org.'  \
-format=json | jq -r .item.id)

echo "Auth Method ID:" $AUTH_METHOD_ID

# Create an Account for MyUser
export MYUSER_ACCOUNT_ID=$(boundary accounts create password \
-recovery-config /root/boundary-controller-recovery.hcl \
-login-name "myuser" \
-password "foofoofoo" \
-auth-method-id $AUTH_METHOD_ID \
-format=json | jq -r .item.id)

echo "MyUser Account ID:" $MYUSER_ACCOUNT_ID

# Create the User Principal for MyUser
export MYUSER_ID=$( \
boundary users create -scope-id $ORG_SCOPE_ID \
-recovery-config /root/boundary-controller-recovery.hcl \
-name "myuser" \
-description "My user!" \
-format=json | jq -r .item.id)

echo "MyUser ID:" $MYUSER_ACCOUNT_ID

# Add MyUser Principal to the Account
boundary users add-accounts \
-recovery-config /root/boundary-controller-recovery.hcl \
-id $MYUSER_ID \
-account $MYUSER_ACCOUNT_ID

export GLOBAL_ANON_LISTING_ID=$( \
boundary roles create -name 'global_anon_listing' \
-recovery-config /root/boundary-controller-recovery.hcl \
-scope-id 'global' \
-format=json | jq -r .item.id)

echo "Global Anon Listing ID:" $GLOBAL_ANON_LISTING_ID

boundary roles add-grants -id $GLOBAL_ANON_LISTING_ID \
-recovery-config /root/boundary-controller-recovery.hcl \
-grant 'id=*;type=auth-method;actions=list,authenticate' \
-grant 'id=*;type=scope;actions=list,no-op' \
-grant 'id={{account.id}};actions=read,change-password'

boundary roles add-principals -id $GLOBAL_ANON_LISTING_ID \
-recovery-config /root/boundary-controller-recovery.hcl \
-principal 'u_anon'

export ORG_ANON_LISTING_ID=$( \
boundary roles create -name 'org_anon_listing' \
-recovery-config /root/boundary-controller-recovery.hcl \
-scope-id $ORG_SCOPE_ID \
-format=json | jq -r .item.id)

echo $ORG_ANON_LISTING_ID

boundary roles add-grants -id $ORG_ANON_LISTING_ID \
-recovery-config /root/boundary-controller-recovery.hcl \
-grant 'id=*;type=auth-method;actions=list,authenticate' \
-grant 'type=scope;actions=list' \
-grant 'id={{account.id}};actions=read,change-password'

boundary roles add-principals -id $ORG_ANON_LISTING_ID \
-recovery-config /root/boundary-controller-recovery.hcl \
-principal 'u_anon'

export ORG_ADMIN_ID=$( \
boundary roles create -name 'org_admin' \
-recovery-config /root/boundary-controller-recovery.hcl \
-scope-id 'global' \
-grant-scope-id $ORG_SCOPE_ID \
-format=json | jq -r .item.id)

echo $ORG_ADMIN_ID

boundary roles add-grants -id $ORG_ADMIN_ID \
-recovery-config /root/boundary-controller-recovery.hcl \
-grant 'id=*;type=*;actions=*'

boundary roles add-principals -id $ORG_ADMIN_ID \
-recovery-config /root/boundary-controller-recovery.hcl \
-principal $MYUSER_ID

export PROJECT_ADMIN_ID=$(
boundary roles create -name 'project_admin' \
-recovery-config /root/boundary-controller-recovery.hcl \
-scope-id $ORG_SCOPE_ID \
-grant-scope-id $PROJECT_SCOPE_ID \
-format=json | jq -r .item.id)

echo $PROJECT_ADMIN_ID

boundary roles add-grants -id $PROJECT_ADMIN_ID \
-recovery-config /root/boundary-controller-recovery.hcl \
-grant 'id=*;type=*;actions=*'

boundary roles add-principals -id $PROJECT_ADMIN_ID \
-recovery-config /root/boundary-controller-recovery.hcl \
-principal=$MYUSER_ID

boundary authenticate password \
-auth-method-id $AUTH_METHOD_ID \
-login-name=myuser \
-keyring-type=none \
-password=foofoofoo

# root@boundary-controller:~# boundary authenticate password \
# > -auth-method-id $AUTH_METHOD_ID \
# > -login-name myuser \
# > -password foofoofoo
# Error fetching token from keyring: The specified item could not be found in the keyring
# Token must be provided via BOUNDARY_TOKEN env var or -token flag. Reading the token can also be disabled via -keyring-type=none.
# Error from controller when performing authentication

# Error information:
  # Kind:                NotFound
  # Message:             Unable to find requested resource.
  # Status:              404
  # context:             Error from controller when performing authentication

exit 0
