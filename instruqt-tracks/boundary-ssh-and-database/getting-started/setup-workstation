#!/bin/bash -l

# https://www.boundaryproject.io/docs/getting-started#what-is-dev-mode

#########
# Install the Binaries
#########
curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
sudo apt-get update && sudo apt-get install boundary

#########
# Set up a Controller
#########
cat <<-EOF > /root/boundary-controller.hcl
listener "tcp" {
  purpose = "api"
  address = "0.0.0.0"
  tls_disable = "true"
}

listener "tcp" {
  purpose = "cluster"
  address = "0.0.0.0"
  tls_disable = "true"
}

controller {
  name = "boundary-controller"
  description = "Boundary controller"
  public_cluster_addr = "boundary-controller"
  database {
    url = "postgres://boundary:boundary_pw@postgres:5432/boundary?sslmode=disable"
  }
}

kms "transit" {
  purpose = "root"
  address = "http://vault:8200"
  token = "boundary-test"
  disable_renewal = "true"
  key_name = "root"
  mount_path = "boundary"
}

kms "transit" {
  purpose = "recovery"
  address = "http://vault:8200"
  token = "boundary-test"
  disable_renewal = "true"
  key_name = "recovery"
  mount_path = "boundary"
}

kms "transit" {
  purpose = "worker-auth"
  address = "http://vault:8200"
  token = "boundary-test"
  disable_renewal = "true"
  key_name = "worker-auth"
  mount_path = "boundary"
}

disable_mlock = true
EOF

#########
# Set up a Worker
#########
cat <<-EOF > /root/boundary-worker.hcl
listener "tcp" {
  purpose = "proxy"
  address = "0.0.0.0"
  tls_disable = "true"
}

worker {
  name = "boundary-worker"
  description = "Demo worker instance
  controllers = [
    "boundary-controller"
  ]
}

kms "transit" {
  purpose = "worker-auth"
  address = "http://vault:8200"
  token = "boundary-test"
  disable_renewal = "true"
  key_name = "worker-auth"
  mount_path = "boundary"
}

disable_mlock = true
EOF


#########
# Start a Dev Vault
#########
# docker run --cap-add=IPC_LOCK -d --name=dev-vault vault

#########
# Start a Postgres Instance
#########
# docker run --name some-postgres -e POSTGRES_PASSWORD=postgres -d postgres

exit 0
