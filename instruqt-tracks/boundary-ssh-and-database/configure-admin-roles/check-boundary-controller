#!/bin/bash -l

# TODO: double check this file works and is stable

# Check that the global scope admin role was created in the global scope
GLOBAL_ADMIN_ROLE_NAME=$(boundary roles list \
	-recovery-config /etc/boundary.d/recovery.hcl \
	-scope-id global \
	-format json | jq -r ".items[1].name")

if [ "$GLOBAL_ADMIN_ROLE_NAME" != "global_admin" ]; then
    fail-message "You did not create the global_admin role."
    exit 1
fi

# Check that the org scope admin role was created in the global scope
ORG_ADMIN_ROLE_NAME=$(boundary roles list \
	-recovery-config /etc/boundary.d/recovery.hcl \
	-scope-id global \
	-format json | jq -r ".items[2].name")

if [ "$ORG_ADMIN_ROLE_NAME" != "org_admin" ]; then
    fail-message "You did not create the org_admin role."
    exit 1
fi

# Check that the project scope admin role was created in the org scope
PROJECT_ADMIN_ROLE_NAME=$(boundary roles list \
	-recovery-config /etc/boundary.d/recovery.hcl \
	-scope-id $ORG_SCOPE_ID \
	-format json | jq -r ".items[1].name")

if [ "$PROJECT_ADMIN_ROLE_NAME" != "project_admin" ]; then
    fail-message "You did not create the project_admin role."
    exit 1
fi

# TODO: check that the roles are attached to the user?

###
# Check the expected env vars are set
###
if [ "$GLOBAL_ADMIN_ROLE_ID" = "" ]; then
    fail-message "You did not set the GLOBAL_ADMIN_ROLE_ID env var."
    exit 1
fi

if [ "$ORG_ADMIN_ROLE_ID" = "" ]; then
    fail-message "You did not set the ORG_ADMIN_ROLE_ID env var."
    exit 1
fi

###
# Check the expected env vars were added to the ~/.bashrc file
###
if ! grep -q 'GLOBAL_ADMIN_ROLE_ID' ~/.bashrc; then
    fail-message "You did not add the GLOBAL_ADMIN_ROLE_ID env var to your ~/.bashrc file."
	exit 1
fi

if ! grep -q 'ORG_ADMIN_ROLE_ID' ~/.bashrc; then
    fail-message "You did not add the ORG_ADMIN_ROLE_ID env var to your ~/.bashrc file."
	exit 1
fi

exit 0
