#!/bin/bash -l

# https://www.boundaryproject.io/docs/getting-started#what-is-dev-mode

#########
# Install Boundary
#########
curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
apt-get update && apt-get install boundary

#########
# Install Postgres client
#########
apt-get install -y postgresql-client

#########
# Set up a Controller
#########
cat <<-EOF > /root/boundary-controller.hcl
listener "tcp" {
  purpose = "api"
  address = "0.0.0.0"
  tls_disable = "true"
}

listener "tcp" {
  purpose = "cluster"
  address = "0.0.0.0"
  tls_disable = "true"
}

controller {
  name = "boundary-controller"
  description = "Boundary controller"
  public_cluster_addr = "boundary-controller"
  database {
    url = "postgres://postgres:postgres@localhost:5432/boundary?sslmode=disable"
  }
}

# Root KMS configuration block: this is the root key for Boundary
# Use a production KMS such as Vault or AWS KMS for production installs
kms "aead" {
  purpose = "root"
  aead_type = "aes-gcm"
  key = "sP1fnF5Xz85RrXyELHFeZg9Ad2qt4Z4bgNHVGtD6ung="
  key_id = "global_root"
}

# Worker authorization KMS
# Use a production KMS such as Vault or AWS KMS for production installs
kms "aead" {
  purpose = "worker-auth"
  aead_type = "aes-gcm"
  key = "8fZBjCUfN0TzjEGLQldGY4+iE9AkOvCfjh7+p0GtRBQ="
  key_id = "global_worker-auth"
}

# Recovery KMS block: configures the recovery key for Boundary
# Use a production KMS such as Vault or AWS KMS for production installs
kms "aead" {
  purpose = "recovery"
  aead_type = "aes-gcm"
  key = "8fZBjCUfN0TzjEGLQldGY4+iE9AkOvCfjh7+p0GtRBQ="
  key_id = "global_recovery"
}

disable_mlock = true
EOF

#########
# Set up a Worker
#########
cat <<-EOF > /root/boundary-worker.hcl
listener "tcp" {
  purpose = "proxy"
  address = "0.0.0.0"
  tls_disable = "true"
}

worker {
  name = "boundary-worker"
  description = "Demo worker instance"
  controllers = [
    "boundary-controller"
  ]
}

# Worker authorization KMS
# Use a production KMS such as Vault or AWS KMS for production installs
kms "aead" {
    purpose = "worker-auth"
    aead_type = "aes-gcm"
    key = "8fZBjCUfN0TzjEGLQldGY4+iE9AkOvCfjh7+p0GtRBQ="
    key_id = "global_worker-auth"
}

disable_mlock = true
EOF


#########
# Start a Dev Vault
#########
# docker run --cap-add=IPC_LOCK -d --name=dev-vault vault

#########
# Start a Postgres Instance
#########
# docker run --name some-postgres -e POSTGRES_PASSWORD=postgres -d postgres

#########
# Install VS Code Server
#########
curl -fsSL https://code-server.dev/install.sh | sh

# Create a unit file for VS Code server
cat <<-EOF > /etc/systemd/system/code-server.service
[Unit]
Description=Code Server
After=network.target
StartLimitIntervalSec=0
[Service]
Type=simple
Restart=always
RestartSec=1
User=root
ExecStart=/usr/bin/code-server --host 0.0.0.0 --port 8443 --cert --auth none /root/
[Install]
WantedBy=multi-user.target
EOF

# Enable and start VS Code server
systemctl enable code-server
systemctl start code-server

# TODO: document this

docker run --name postgres -p 5432:5432 -e POSTGRES_PASSWORD=postgres -d postgres
export PGPASSWORD=postgres
psql -U postgres -h localhost -p 5432 -c "CREATE DATABASE boundary";
psql -U postgres -h localhost -p 5432 -c "CREATE USER boundary WITH PASSWORD 'boundary' SUPERUSER;"

# boundary database init -skip-initial-login-role-creation -config=/root/boundary-controller.hcl
boundary database init -config=/root/boundary-controller.hcl

sudo cat << EOF > /etc/systemd/system/boundary-controller.service
[Unit]
Description=Boundary Controller

[Service]
ExecStart=/usr/bin/boundary server -config /root/boundary-controller.hcl
User=boundary
Group=boundary
LimitMEMLOCK=infinity
Capabilities=CAP_IPC_LOCK+ep
CapabilityBoundingSet=CAP_SYSLOG CAP_IPC_LOCK

[Install]
WantedBy=multi-user.target
EOF


sudo cat << EOF > /etc/systemd/system/boundary-worker.service
[Unit]
Description=Boundary Worker

[Service]
ExecStart=/usr/bin/boundary server -config /root/boundary-worker.hcl
User=boundary
Group=boundary
LimitMEMLOCK=infinity
Capabilities=CAP_IPC_LOCK+ep
CapabilityBoundingSet=CAP_SYSLOG CAP_IPC_LOCK

[Install]
WantedBy=multi-user.target
EOF

# Add the boundary system user and group to ensure we have a no-login
# user capable of owning and running Boundary
# sudo adduser --system --group boundary || true
# sudo chown boundary:boundary /root/boundary-controller.hcl
# sudo chown boundary:boundary /root/boundary-worker.hcl
# sudo chown boundary:boundary /usr/bin/boundary

sudo chmod 664 /etc/systemd/system/boundary-controller.service
sudo chmod 664 /etc/systemd/system/boundary-worker.service
sudo systemctl daemon-reload
sudo systemctl enable boundary-controller
sudo systemctl enable boundary-worker
sudo systemctl start boundary-controller
sudo systemctl start boundary-worker

# TODO: install vault and added it to systemd

exit 0
